input {
    jdbc {
        jdbc_connection_string => "jdbc:postgresql://common_pg:5432/anthaathi_workspace_dev"
        jdbc_user => "postgres"
        jdbc_password => "pgpassword"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_paging_enabled => true
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        schedule => "*/10 * * * * *"
        statement => "
        	SELECT task.id                                            as id,
                             task.title                                         as title,
                             task.description                                   as description,
                             task.data::text                                    as task_data,
                             task.author                                        as author,
                             task.priority                                      as priority,
                             task.due_date                                      as due_date,
                             task.emoji                                         as emoji,
                             task.project_id                                    as project_id,
                             task.status_id,
                             task.organization_id                               as organization_id,
                             task.task_template_id                              as task_template_id,
                             task.customer_id                                   as customer_id,
                             task.created_at                                    as created_at,
                             task.updated_at                                    as updated_at,
                             task.start_date                                    as start_date,
                             task.due_date                                      as end_date,
                             c.id                                               as customer_id,
                             c.name                                             as customer_name,
                             c.email                                            as customer_email,
                             c.phone_number                                     as customer_phone_number,
                             c.first_name                                       as customer_first_name,
                             c.last_name                                        as customer_last_name,
                             c.data::text                                       as customer_data,
                             tt.name                                            as task_template_name,
                             json_agg(json_build_object('id', address.id, 'address', address.title, 'street', address.street, 'city',
                                                        address.city, 'state', address.state, 'zip', address.zip_code, 'landmark',
                                                        address.landmark, 'country',
                                                        address.country))::text as addresses,
														 ts.name                                            AS status_name,
														 ts.id																							AS status_id
                      FROM task.task
                               INNER JOIN crm.customer c ON task.customer_id = c.id
                               INNER JOIN task.task_template tt ON task.task_template_id = tt.id
                               LEFT JOIN common.address address ON address.customer_id = c.id
                               LEFT JOIN task.task_status ts ON task.status_id = ts.id
                      WHERE task.updated_at > :sql_last_value AND task.updated_at < CURRENT_TIMESTAMP
                      GROUP BY task.id, ts.name, c.id, tt.name, ts.id
                      ORDER BY task.id"
    }
}

filter {
    ruby {
        code => "
            require 'json'
            begin
                data_json = JSON.parse(event.get('task_data').to_s || '{}')
                event.set('task_json', data_json)

                customer_data = JSON.parse(event.get('customer_data').to_s || '{}')
                event.set('customer_data', customer_data)

								first_address = JSON.parse(event.get('addresses').to_s || '{}').first
								event.set('customer_first_address', first_address)

                addresses = JSON.parse(event.get('addresses').to_s || '{}')
                event.set('addresses', addresses)
            rescue Exception => e
                event.tag('invalide data json')
            end
        "
    }

    mutate{
        copy => {"id" => "[@metadata][_id]"}
        copy => {"organization_id" => "[@metadata][organization_id]"}
        remove_field => ["@version","@timestamp"]
    }
}

output {
    opensearch {
				hosts => ["https://opensearch-node1:9200", "https://opensearch-node1:9200"]
        index => "tasks_%{[@metadata][organization_id]}"
        document_id => "%{[@metadata][_id]}"
				ssl => true
				ssl_certificate_verification => false
			  user => "admin"
			  password => "admin"
    }
}
